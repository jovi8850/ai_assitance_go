library(ggplot2)
library(dplyr)
library(broom)
library(purrr)
library(tidyr)
# Load Anscombe dataset
data("anscombe")  # Built-in dataset in R
# Anscombe dataset structured for regression analysis
create_dataset <- function(n) {
data.frame(x = anscombe[[paste0("x", n)]], y = anscombe[[paste0("y", n)]])
}
datasets <- map(1:4, create_dataset) %>%
set_names(paste0("dataset", 1:4))
# Regression Analysis function
perform_regression <- function(df, name) {
fit <- lm(y ~ x, data = df)
glance_stats <- glance(fit)  # Model summary statistics
tidy_coefs <- tidy(fit)      # coefficients
# Extract p-value for the slope from summary(fit)$coefficients
slope_p_value <- summary(fit)$coefficients["x", "Pr(>|t|)"]
# Combine results
data.frame(
Dataset = name,
Intercept = tidy_coefs$estimate[tidy_coefs$term == "(Intercept)"],
P_value = glance_stats$p.value,
P_value = slope_p_value,
stringsAsFactors = FALSE)
}
# Measure execution time
start_time <- Sys.time()
results <- imap_dfr(datasets, perform_regression)
end_time <- Sys.time()
elapsed_time <- end_time - start_time
# Regression results and time execution
cat("Linear Regression Results for Anscombe Quartet:\n")
cat("Linear Regression Results for Anscombe Quartet:\n")
cat("Columns: Dataset = dataset name, Intercept = regression intercept, Slope = regression slope, R_squared = R-squared value, Adj_R_squared = adjusted R-squared, P_value = p-value for slope significance\n")
print(results, digits = 4)
cat("\nExecution time:", round(elapsed_time, 4), "seconds\n")
# Plotting Anscombe Quartet Regression with regression line
# Reshape Anscombe dataset for ggplot, joining x and y by dataset number
anscombe_x_long <- anscombe %>%
pivot_longer(cols = x1:x4, names_to = "x_set", values_to = "x") %>%
mutate(dataset_num = as.integer(gsub("x", "", x_set)))
anscombe_y_long <- anscombe %>%
pivot_longer(cols = y1:y4, names_to = "y_set", values_to = "y") %>%
mutate(dataset_num = as.integer(gsub("y", "", y_set)))
anscombe_long <- left_join(anscombe_x_long, anscombe_y_long, by = c("dataset_num", "rowid" = "rowid")) %>%
mutate(dataset = paste0("Dataset ", dataset_num)) %>%
mutate(dataset = paste0("Dataset ", set))
# Anscombe Quartet Regression Analysis in R
# -----------------------------------------
# This script performs linear regression on all four Anscombe datasets
# and displays the regression coefficients and R-squared values.
# It also plots scatterplots with regression lines.
library(ggplot2)
library(dplyr)
library(broom)
library(purrr)
library(tidyr)
# Load Anscombe dataset
data("anscombe")  # Built-in dataset in R
# Anscombe dataset structured for regression analysis
create_dataset <- function(n) {
data.frame(x = anscombe[[paste0("x", n)]], y = anscombe[[paste0("y", n)]])
}
datasets <- map(1:4, create_dataset) %>%
set_names(paste0("dataset", 1:4))
# Regression Analysis function
perform_regression <- function(df, name) {
fit <- lm(y ~ x, data = df)
glance_stats <- glance(fit)  # Model summary statistics
tidy_coefs <- tidy(fit)      # coefficients
# Extract p-value for the slope from summary(fit)$coefficients
slope_p_value <- summary(fit)$coefficients["x", "Pr(>|t|)"]
# Combine results
data.frame(
Dataset = name,
Intercept = tidy_coefs$estimate[tidy_coefs$term == "(Intercept)"],
P_value = glance_stats$p.value,
P_value = slope_p_value,
stringsAsFactors = FALSE)
}
# Measure execution time
start_time <- Sys.time()
results <- imap_dfr(datasets, perform_regression)
end_time <- Sys.time()
elapsed_time <- end_time - start_time
# Regression results and time execution
cat("Linear Regression Results for Anscombe Quartet:\n")
cat("Linear Regression Results for Anscombe Quartet:\n")
cat("Columns: Dataset = dataset name, Intercept = regression intercept, Slope = regression slope, R_squared = R-squared value, Adj_R_squared = adjusted R-squared, P_value = p-value for slope significance\n")
print(results, digits = 4)
cat("\nExecution time:", round(elapsed_time, 4), "seconds\n")
# Plotting Anscombe Quartet Regression with regression line
source("~/_Data Science/Classes/2025 - 2026 Academic Year/MSDS 431/Module 5/ai_r_copilot.r")
# -----------------------------------------
# This script performs linear regression on all four Anscombe datasets
# and displays the regression coefficients and R-squared values.
# It also plots scatterplots with regression lines.
library(ggplot2)
library(dplyr)
library(broom)
library(purrr)
library(tidyr)
# Load Anscombe dataset
data("anscombe")  # Built-in dataset in R
# Anscombe dataset structured for regression analysis
create_dataset <- function(n) {
data.frame(x = anscombe[[paste0("x", n)]], y = anscombe[[paste0("y", n)]])
}
datasets <- map(1:4, create_dataset) %>%
set_names(paste0("dataset", 1:4))
# Regression Analysis function
perform_regression <- function(df, name) {
fit <- lm(y ~ x, data = df)
glance_stats <- glance(fit)  # Model summary statistics
tidy_coefs <- tidy(fit)      # coefficients
# Extract p-value for the slope from summary(fit)$coefficients
slope_p_value <- summary(fit)$coefficients["x", "Pr(>|t|)"]
# Extract slope estimate
slope_estimate <- tidy_coefs$estimate[tidy_coefs$term == "x"]
# Extract R-squared and adjusted R-squared
r_squared <- glance_stats$r.squared
adj_r_squared <- glance_stats$adj.r.squared
# Combine results
data.frame(
Dataset = name,
Intercept = tidy_coefs$estimate[tidy_coefs$term == "(Intercept)"],
Slope = slope_estimate,
R_squared = r_squared,
Adj_R_squared = adj_r_squared,
P_value = slope_p_value,
stringsAsFactors = FALSE)
}
# Measure execution time
start_time <- Sys.time()
results <- imap_dfr(datasets, perform_regression)
end_time <- Sys.time()
elapsed_time <- end_time - start_time
# Regression results and time execution
cat("Linear Regression Results for Anscombe Quartet:\n")
cat("Columns: Dataset = dataset name, Intercept = regression intercept, Slope = regression slope, R_squared = R-squared value, Adj_R_squared = adjusted R-squared, P_value = p-value for slope significance\n")
print(results, digits = 4)
cat("\nExecution time:", round(elapsed_time, 4), "seconds\n")
# Reshape Anscombe dataset for ggplot, joining x and y by dataset number
anscombe_long <- anscombe %>%
pivot_longer(cols = everything(),
names_to = c('.value', 'set'),
names_pattern = '([xy])(\\d)') %>%
mutate(dataset = paste0('Dataset ', set))
ggplot(anscombe_long, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
facet_wrap(~ dataset) +
labs(title = "Anscombeâ€™s Quartet Regression Lines") +
theme_minimal()
